{"version":3,"file":"Button.Split.Example.js","sourceRoot":"../src/","sources":["components/Button/examples/Button.Split.Example.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { css, classNamesFunction } from 'office-ui-fabric-react/lib/Utilities';\nimport { getStyles, IButtonBasicExampleStyleProps, IButtonBasicExampleStyles } from './Button.Basic.Example.styles';\nimport { DefaultButton, IconButton, IButtonProps } from 'office-ui-fabric-react/lib/Button';\nimport { Label } from 'office-ui-fabric-react/lib/Label';\nimport { getCustomSplitButtonStyles } from './Button.Split.Example.styles';\n\nconst alertClicked = (): void => {\n  alert('Clicked');\n};\n\nconst getClassNames = classNamesFunction<IButtonBasicExampleStyleProps, IButtonBasicExampleStyles>();\n\nexport class ButtonSplitExample extends React.Component<IButtonProps> {\n  public render(): JSX.Element {\n    const { disabled, checked } = this.props;\n    const classNames = getClassNames(getStyles, {});\n\n    return (\n      <div className={css(classNames.twoup)}>\n        <div>\n          <Label>Standard</Label>\n          <DefaultButton\n            data-automation-id=\"test\"\n            disabled={disabled}\n            checked={checked}\n            text=\"Create account\"\n            onClick={alertClicked}\n            split={true}\n            splitButtonAriaLabel={'See 2 sample options'}\n            aria-roledescription={'split button'}\n            style={{ height: '35px' }}\n            menuProps={{\n              items: [\n                {\n                  key: 'emailMessage',\n                  text: 'Email message',\n                  iconProps: { iconName: 'Mail' }\n                },\n                {\n                  key: 'calendarEvent',\n                  text: 'Calendar event',\n                  iconProps: { iconName: 'Calendar' }\n                }\n              ]\n            }}\n          />\n        </div>\n        <div>\n          <Label>Primary</Label>\n          <DefaultButton\n            primary\n            data-automation-id=\"test\"\n            disabled={disabled}\n            checked={checked}\n            text=\"Create account\"\n            onClick={alertClicked}\n            split={true}\n            aria-roledescription={'split button'}\n            style={{ height: '35px' }}\n            menuProps={{\n              items: [\n                {\n                  key: 'emailMessage',\n                  text: 'Email message',\n                  iconProps: { iconName: 'Mail' }\n                },\n                {\n                  key: 'calendarEvent',\n                  text: 'Calendar event',\n                  iconProps: { iconName: 'Calendar' }\n                }\n              ]\n            }}\n          />\n        </div>\n        <div>\n          <Label>Primary Action Disabled</Label>\n          <DefaultButton\n            primary\n            data-automation-id=\"test\"\n            disabled={disabled}\n            primaryDisabled={true}\n            checked={checked}\n            text=\"Create account\"\n            onClick={alertClicked}\n            split={true}\n            aria-roledescription={'split button'}\n            style={{ height: '35px' }}\n            menuProps={{\n              items: [\n                {\n                  key: 'emailMessage',\n                  text: 'Email message',\n                  iconProps: { iconName: 'Mail' }\n                },\n                {\n                  key: 'calendarEvent',\n                  text: 'Calendar event',\n                  iconProps: { iconName: 'Calendar' }\n                }\n              ]\n            }}\n          />\n        </div>\n        <div>\n          <Label>Button Disabled</Label>\n          <DefaultButton\n            primary\n            data-automation-id=\"test\"\n            disabled={true}\n            allowDisabledFocus={true}\n            checked={checked}\n            text=\"Create account\"\n            onClick={alertClicked}\n            onKeyPress={alertClicked}\n            onKeyDown={alertClicked}\n            onKeyUp={alertClicked}\n            onMouseDown={alertClicked}\n            onMouseUp={alertClicked}\n            split={true}\n            aria-roledescription={'split button'}\n            style={{ height: '35px' }}\n            menuProps={{\n              items: [\n                {\n                  key: 'emailMessage',\n                  text: 'Email message',\n                  iconProps: { iconName: 'Mail' }\n                },\n                {\n                  key: 'calendarEvent',\n                  text: 'Calendar event',\n                  iconProps: { iconName: 'Calendar' }\n                }\n              ]\n            }}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport class ButtonSplitCustomExample extends React.Component<IButtonProps> {\n  public render(): JSX.Element {\n    const { disabled, checked } = this.props;\n    const customSplitButtonStyles = getCustomSplitButtonStyles();\n\n    return (\n      <div>\n        <Label>Split button with icon and custom styles</Label>\n        <IconButton\n          data-automation-id=\"test\"\n          disabled={disabled}\n          checked={checked}\n          iconProps={{ iconName: 'Upload' }}\n          text=\"Create account\"\n          onClick={alertClicked}\n          split={true}\n          aria-roledescription={'split button'}\n          styles={customSplitButtonStyles}\n          menuProps={{\n            items: [\n              {\n                key: 'emailMessage',\n                text: 'Email message',\n                iconProps: { iconName: 'Mail' }\n              },\n              {\n                key: 'calendarEvent',\n                text: 'Calendar event',\n                iconProps: { iconName: 'Calendar' }\n              }\n            ]\n          }}\n        />\n      </div>\n    );\n  }\n}\n"]}