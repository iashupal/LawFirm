{"version":3,"file":"styled.js","sourceRoot":"../src/","sources":["styled.tsx"],"names":[],"mappings":";;;IAsBA,IAAM,aAAa,GAAG,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;IAE1C;;;;;;;;;;;;;;;;;;OAkBG;IACH,gBAKE,SAA4F,EAC5F,UAA0D,EAC1D,QAA+D,EAC/D,YAAiC,EACjC,IAAc;QAEd,YAAY,GAAG,YAAY,IAAI,EAAE,KAAK,EAAE,EAAE,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC;QAExD,IAAA,0BAAK,EAAE,wBAAsB,EAAtB,2CAAsB,CAAkB;QACvD,IAAM,eAAe,GAAG,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC;QAErE;YAAsB,mCAAoC;YAA1D;gBAAA,qEA6CC;gBAvCS,0BAAoB,GAAG,KAAK,CAAC;gBAoB7B,oBAAc,GAAG,UAAC,OAA2B;oBACnD,KAAI,CAAC,oBAAoB,GAAG,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,mBAAmB,CAAC;oBAEzE,IAAM,QAAQ,GAAG,+BAAc,CAAC,WAAW,CAAC,MAAM,EAAE,KAAK,EAAE,OAAO,CAAC,cAAc,CAAC,CAAC;oBAC3E,IAAA,kCAAwB,EAAE,kBAAG,EAAE,kDAAO,CAAc;oBAC5D,IAAM,eAAe,GAAG,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;oBAEpE,KAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,CAAC;oBAErC,OAAO,oBAAC,SAAS,uBAAK,IAAI,EAAM,eAAe,EAAM,KAAI,CAAC,KAAK,IAAE,MAAM,EAAE,KAAI,CAAC,OAAO,IAAI,CAAC;gBAC5F,CAAC,CAAC;gBAQM,wBAAkB,GAAG,cAAY,OAAA,KAAI,CAAC,WAAW,EAAE,EAAlB,CAAkB,CAAC;;YAC9D,CAAC;YAnCQ,wBAAM,GAAb;gBACE,OAAO,oBAAC,qCAAiB,CAAC,QAAQ,QAAE,IAAI,CAAC,cAAc,CAA8B,CAAC;YACxF,CAAC;YAEM,mCAAiB,GAAxB;gBACE,IAAI,CAAC,IAAI,CAAC,oBAAoB,EAAE;oBAC9B,+BAAc,CAAC,OAAO,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;iBACjD;YACH,CAAC;YAEM,sCAAoB,GAA3B;gBACE,IAAI,CAAC,IAAI,CAAC,oBAAoB,EAAE;oBAC9B,+BAAc,CAAC,SAAS,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;iBACnD;YACH,CAAC;YAcO,+BAAa,GAArB,UAAsB,gBAAgE;gBACpF,IAAI,CAAC,IAAI,CAAC,OAAO,IAAI,gBAAgB,KAAK,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;oBAChF,IAAI,CAAC,OAAO,GAAG,CAAC,UAAU,EAAE,gBAAgB,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;iBAClE;YACH,CAAC;YAzCD,wFAAwF;YACxF,uDAAuD;YACvD,kCAAkC;YACpB,mBAAW,GAAG,YAAS,SAAS,CAAC,WAAW,IAAK,SAAiB,CAAC,IAAI,CAAE,CAAC;YAyC1F,cAAC;SAAA,AA7CD,CAAsB,eAAe,GA6CpC;QAED,0CAA0C;QAC1C,kCAAkC;QAClC,OAAO,OAAc,CAAC;IACxB,CAAC;IAlED,wBAkEC","sourcesContent":["import * as React from 'react';\nimport { concatStyleSets, IStyleSet, IStyleFunctionOrObject, IConcatenatedStyleSet } from '@uifabric/merge-styles';\nimport { Customizations } from './customizations/Customizations';\nimport { CustomizerContext, ICustomizerContext } from './customizations/CustomizerContext';\n\nexport interface IPropsWithStyles<TStyleProps, TStyleSet extends IStyleSet<TStyleSet>> {\n  styles?: IStyleFunctionOrObject<TStyleProps, TStyleSet>;\n}\n\nexport interface ICustomizableProps {\n  /**\n   * Name of scope, which can be targeted using the Customizer.\n   */\n  scope: string;\n\n  /**\n   * List of fields which can be customized.\n   * @defaultvalue [ 'theme', 'styles' ]\n   */\n  fields?: string[];\n}\n\nconst DefaultFields = ['theme', 'styles'];\n\n/**\n * The styled HOC wrapper allows you to create a functional wrapper around a given component which will resolve\n * getStyles functional props, and mix customized props passed in using concatStyleSets.\n *\n * @example\n * ```tsx\n * export const Toggle = styled(\n *   ToggleBase,\n *   props => ({ root: { background: 'red' }})\n * );\n * ```\n * @param Component - The unstyled base component to render, which receives styles.\n * @param baseStyles - The styles which should be curried with the component.\n * @param getProps - A helper which provides default props.\n * @param customizable - An object which defines which props can be customized using the Customizer.\n * @param pure - A boolean indicating if the component should avoid re-rendering when props haven't changed.\n * Note that pure should not be used on components which allow children, or take in complex objects or\n * arrays as props which could mutate on every render.\n */\nexport function styled<\n  TComponentProps extends IPropsWithStyles<TStyleProps, TStyleSet>,\n  TStyleProps,\n  TStyleSet extends IStyleSet<TStyleSet>\n>(\n  Component: React.ComponentClass<TComponentProps> | React.StatelessComponent<TComponentProps>,\n  baseStyles: IStyleFunctionOrObject<TStyleProps, TStyleSet>,\n  getProps?: (props: TComponentProps) => Partial<TComponentProps>,\n  customizable?: ICustomizableProps,\n  pure?: boolean\n): React.StatelessComponent<TComponentProps> {\n  customizable = customizable || { scope: '', fields: undefined };\n\n  const { scope, fields = DefaultFields } = customizable;\n  const ParentComponent = pure ? React.PureComponent : React.Component;\n\n  class Wrapped extends ParentComponent<TComponentProps, {}> {\n    // Function.prototype.name is an ES6 feature, so the cast to any is required until we're\n    // able to drop IE 11 support and compile with ES6 libs\n    // tslint:disable-next-line:no-any\n    public static displayName = `Styled${Component.displayName || (Component as any).name}`;\n\n    private _inCustomizerContext = false;\n    private _customizedStyles?: IStyleFunctionOrObject<TStyleProps, TStyleSet>;\n    private _styles: (IStyleFunctionOrObject<TStyleProps, TStyleSet> | undefined)[];\n\n    public render(): JSX.Element {\n      return <CustomizerContext.Consumer>{this._renderContent}</CustomizerContext.Consumer>;\n    }\n\n    public componentDidMount(): void {\n      if (!this._inCustomizerContext) {\n        Customizations.observe(this._onSettingsChanged);\n      }\n    }\n\n    public componentWillUnmount(): void {\n      if (!this._inCustomizerContext) {\n        Customizations.unobserve(this._onSettingsChanged);\n      }\n    }\n\n    private _renderContent = (context: ICustomizerContext): JSX.Element => {\n      this._inCustomizerContext = !!context.customizations.inCustomizerContext;\n\n      const settings = Customizations.getSettings(fields, scope, context.customizations);\n      const { styles: customizedStyles, dir, ...rest } = settings;\n      const additionalProps = getProps ? getProps(this.props) : undefined;\n\n      this._updateStyles(customizedStyles);\n\n      return <Component {...rest} {...additionalProps} {...this.props} styles={this._styles} />;\n    };\n\n    private _updateStyles(customizedStyles: IStyleFunctionOrObject<TStyleProps, TStyleSet>): void {\n      if (!this._styles || customizedStyles !== this._styles[1] || !!this.props.styles) {\n        this._styles = [baseStyles, customizedStyles, this.props.styles];\n      }\n    }\n\n    private _onSettingsChanged = (): void => this.forceUpdate();\n  }\n\n  // This preserves backwards compatibility.\n  // tslint:disable-next-line:no-any\n  return Wrapped as any;\n}\n"]}