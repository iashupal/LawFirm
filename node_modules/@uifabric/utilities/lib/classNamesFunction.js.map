{"version":3,"file":"classNamesFunction.js","sourceRoot":"../src/","sources":["classNamesFunction.ts"],"names":[],"mappings":"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","sourcesContent":["import { mergeStyleSets, IStyleSet, IProcessedStyleSet } from '@uifabric/merge-styles';\nimport { IStyleFunctionOrObject } from '@uifabric/merge-styles';\n\nconst MAX_CACHE_COUNT = 50;\n\n// Note that because of the caching nature within the classNames memoization,\n// I've disabled this rule to simply be able to work with any types.\n// tslint:disable:no-any\n\n// This represents a prop we attach to each Map to indicate the cached return value\n// associated with the graph node.\nconst RetVal = '__retval__';\n\ninterface IRecursiveMemoNode extends Map<any, IRecursiveMemoNode> {\n  [RetVal]?: string;\n}\n\nexport interface IClassNamesFunctionOptions {\n  /**\n   * Disables class caching for scenarios where styleProp parts mutate frequently.\n   */\n  disableCaching?: boolean;\n}\n\n/**\n * Creates a getClassNames function which calls getStyles given the props, and injects them\n * into mergeStyleSets.\n *\n * Note that the props you pass in on every render should be in the same order and\n * immutable (numbers, strings, and booleans). This will allow the results to be memoized. Violating\n * these will cause extra recalcs to occur.\n */\nexport function classNamesFunction<TStyleProps extends {}, TStyleSet extends IStyleSet<TStyleSet>>(\n  options: IClassNamesFunctionOptions = {}\n): (getStyles: IStyleFunctionOrObject<TStyleProps, TStyleSet> | undefined, styleProps?: TStyleProps) => IProcessedStyleSet<TStyleSet> {\n  // We build a trie where each node is a Map. The map entry key represents an argument\n  // value, and the entry value is another node (Map). Each node has a `__retval__`\n  // property which is used to hold the cached response.\n\n  // To derive the response, we can simply ensure the arguments are added or already\n  // exist in the trie. At the last node, if there is a `__retval__` we return that. Otherwise\n  // we call the `getStyles` api to evaluate, cache on the property, and return that.\n  let map: IRecursiveMemoNode = new Map();\n  let resultCount = 0;\n\n  const getClassNames = (\n    styleFunctionOrObject: IStyleFunctionOrObject<TStyleProps, TStyleSet> | undefined,\n    styleProps: TStyleProps = {} as TStyleProps\n  ): IProcessedStyleSet<TStyleSet> => {\n    let current: Map<any, any> = map;\n    const disableCaching = options.disableCaching;\n\n    if (!options.disableCaching) {\n      current = _traverseMap(map, styleFunctionOrObject as any);\n      current = _traverseMap(current, styleProps);\n    }\n\n    if (disableCaching || !(current as any)[RetVal]) {\n      if (styleFunctionOrObject === undefined) {\n        (current as any)[RetVal] = {} as IProcessedStyleSet<TStyleSet>;\n      } else if (Array.isArray(styleFunctionOrObject)) {\n        (current as any)[RetVal] = mergeStyleSets(...(styleFunctionOrObject as any).map(_derive, styleProps));\n      } else {\n        (current as any)[RetVal] = mergeStyleSets(\n          typeof styleFunctionOrObject === 'function' ? styleFunctionOrObject(styleProps) : styleFunctionOrObject\n        );\n      }\n\n      if (!disableCaching) {\n        resultCount++;\n      }\n    }\n\n    if (resultCount > MAX_CACHE_COUNT) {\n      map.clear();\n      resultCount = 0;\n\n      // Mutate the options passed in, that's all we can do.\n      options.disableCaching = true;\n\n      // Note: this code is great for debugging problems with styles being recaculated, but commenting it out\n      // to avoid confusing consumers.\n\n      // if (process.env.NODE_ENV !== 'production') {\n      //  console.log('Styles are being recalculated far too frequently. Something is mutating the class over and over.');\n      //  // tslint:disable-next-line:no-console\n      //  console.trace();\n      // }\n    }\n\n    // Note: the RetVal is an attached property on the Map; not a key in the Map. We use this attached property to\n    // cache the return value for this branch of the graph.\n    return (current as any)[RetVal];\n  };\n\n  return getClassNames;\n}\n\nfunction _derive(obj: any): any {\n  return typeof obj === 'function' ? obj(this) : obj;\n}\n\nfunction _traverseEdge(current: Map<any, any>, value: any): Map<any, any> {\n  value = _normalizeValue(value);\n\n  if (!current.has(value)) {\n    current.set(value, new Map<any, any>());\n  }\n\n  return current.get(value);\n}\n\nfunction _traverseMap(current: Map<any, any>, inputs: any[] | Object): Map<any, any> {\n  if (Array.isArray(inputs)) {\n    for (let i = 0; i < inputs.length; i++) {\n      current = _traverseEdge(current, inputs[i]);\n    }\n  } else if (typeof inputs === 'object') {\n    for (const propName in inputs) {\n      if (inputs.hasOwnProperty(propName)) {\n        current = _traverseEdge(current, (inputs as any)[propName]);\n      }\n    }\n  }\n\n  return current;\n}\n\nfunction _normalizeValue(value: any): string {\n  switch (value) {\n    case undefined:\n      return '__undefined__';\n    case null:\n      return '__null__';\n    default:\n      return value;\n  }\n}\n"]}